@page "/cart"

@using Blazored.LocalStorage
@using Tangy_Common
@using TangyWeb_Client.ViewModels
@using TangyWeb_Client.Service.IService

@inject ILocalStorageService _localStorageService
@inject IProductService _productService
@inject ICartService _cartService

@if (IsProcessing)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" />
    </div>
}
else
{
    <div class="container mt-4">
        <div class="card">
            <div class="card-header bg-dark text-light ml-0 ">
                <div class="row">
                    <div class="col-6 pt-2">
                        Shopping Cart
                    </div>
                    <div class="col-6 col-md-3 offset-md-3 text-end">
                        <a href="/" class="btn btn-outline-info form-control">Continue Shopping</a>
                    </div>
                </div>
            </div>
            <div class="card-body">
                @foreach (var item in ShoppingCartItems)
                {
                    <div class="row">
                        <div class="col-3 col-md-1 text-center py-2">
                            <img src="@item.Product.ImageUrl" class="rounded" width="100%" />
                        </div>
                        <div class="col-9 text-sm-center text-md-start col-md-4 pt-lg-1 ">
                            <h4><strong>@item.Product.Name</strong></h4>

                            <div class="badge bg-primary text-center" style="font-size:12px;">
                                @item.Product.Category.Name
                            </div>
                            <div class="badge bg-info text-center" style="font-size:12px;">
                                @item.Product.Color
                            </div>
                            <div><p>Size: @item.ProductPrice.Size</p></div>
                        </div>
                        <div class="col-12 text-sm-center col-md-7 text-md-start row  pt-lg-3 mt-3">
                            <div class="col-4 pt-1">
                                <h6><strong>@item.ProductPrice.Price.ToString("c") <span class="text-muted">x</span> @item.Count </strong></h6>
                            </div>
                            <div class="col-6 col-sm-4 col-lg-6">
                                <RadzenButton Click=@(() => IncrementItem(item, 1)) Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
                                <RadzenButton Click=@(() => DecrementItem(item, 1)) Icon="remove_circle_outline" ButtonStyle="ButtonStyle.Primary" />
                            </div>
                            <div class="col-2 col-sm-4 col-lg-2 text-right">
                                <RadzenButton Click=@(() => DecrementItem(item, item.Count)) Icon="delete" ButtonStyle="ButtonStyle.Primary" />
                            </div>
                        </div>
                    </div>
                }

                <hr />

                <div class="row">
                    <div class="col-12 col-md-5">
                    </div>
                    <div class="col-12 col-md-6 offset-md-1 col-lg-4 offset-lg-3 pr-4">
                        <ul class="list-group">
                            <li class="list-group-item d-flex justify-content-between bg-light">
                                <span class="text-info"> Total (USD)</span>
                                <strong class="text-info">@Total.ToString("c")</strong>
                            </li>
                        </ul>
                    </div>
                </div>


            </div>
            <div class="card-footer">
                <div class="col-12  col-md-3 offset-md-9">
                    <a href="/summary" class="btn btn-secondary form-control">Summary</a>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool IsProcessing { get; set; } = false;
    private IList<ShoppingCart> ShoppingCartItems { get; set; } = new List<ShoppingCart>();
    private double Total { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        await LoadShoppingCartItems();
        CalculateTotal();
        IsProcessing = false;
    }

    private async Task LoadShoppingCartItems()
    {
        ShoppingCartItems = await _localStorageService.GetItemAsync<IList<ShoppingCart>>(SD.ShoppingCart);
        var products = await _productService.GetAll();
        foreach (var item in ShoppingCartItems)
        {
            item.Product = products.FirstOrDefault(p => p.Id == item.ProductId);
            item.ProductPrice = item.Product.ProductPrices.FirstOrDefault(p => p.Id == item.ProductPriceId);
        }
    }

    private void CalculateTotal()
    {
        Total = 0;
        foreach (var item in ShoppingCartItems)
        {
            Total += (item.ProductPrice.Price * item.Count);
        }
    }

    private async Task IncrementItem(ShoppingCart item, int quantity)
    {
        await _cartService.IncrementCart(new ShoppingCart()
            {
                ProductId = item.ProductId,
                ProductPriceId = item.ProductPriceId,
                Count = quantity
            }
        );
        await LoadShoppingCartItems();
        CalculateTotal();
    }

    private async Task DecrementItem(ShoppingCart item, int quantity)
    {
        await _cartService.DecrementCart(new ShoppingCart()
            {
                ProductId = item.ProductId,
                ProductPriceId = item.ProductPriceId,
                Count = quantity
            }
        );
        await LoadShoppingCartItems();
        CalculateTotal();
    }
}
